%description:

This test contains basic checks for various multi-dimensional partitioning of mathematical functions.

%includes:
#include "inet/common/math/Functions.h"

%global:

using namespace inet;
using namespace inet::math;
using namespace inet::units::values;

class FunctionTest
{
  protected:
    template<typename R, typename D>
    void printPartitioning(const typename D::I& i, const Ptr<const IFunction<R, D>>& f) {
    	FunctionChecker<R, D>(f).check();
        std::cout << "\nPartitioning " << i << std::endl;
	    f->partition(i, [&] (const typename D::I& i1, const IFunction<R, D> *f1) {
            f1->print(std::cout, i1);
	    });
    }

  public:
    void test1();
};

void FunctionTest::test1()
{
    std::cout << "\nConstantFunction\n";
    auto f1 = makeShared<ConstantFunction<double, Domain<double>>>(10.0);
    printPartitioning<double, Domain<double>>(f1->getDomain(), f1);

    std::cout << "\nOneDimensionalBoxcarFunction\n";
    auto f2 = makeShared<OneDimensionalBoxcarFunction<double, double>>(-1.0, 1.0, 10.0);
    printPartitioning<double, Domain<double>>(f2->getDomain(), f2);
    printPartitioning<double, Domain<double>>(Interval<double>(Point<double>(-10.0), Point<double>(0.0), 0), f2);
    printPartitioning<double, Domain<double>>(Interval<double>(Point<double>(0.0), Point<double>(10.0), 0), f2);

    std::cout << "\nAdditionFunction\n";
    auto f3 = makeShared<OneDimensionalBoxcarFunction<double, double>>(0.0, 2.0, 1.0);
    auto f4 = f2->add(f3);
    printPartitioning<double, Domain<double>>(f3->getDomain(), f4);
    printPartitioning<double, Domain<double>>(Interval<double>(Point<double>(-10.0), Point<double>(0.0), 0), f4);
    printPartitioning<double, Domain<double>>(Interval<double>(Point<double>(0.0), Point<double>(10.0), 0), f4);

    std::cout << "\nMultiplicationFunction\n";
    auto f5 = f2->multiply(f3);
    printPartitioning<double, Domain<double>>(f3->getDomain(), f5);
    printPartitioning<double, Domain<double>>(Interval<double>(Point<double>(-10.0), Point<double>(0.0), 0), f5);
    printPartitioning<double, Domain<double>>(Interval<double>(Point<double>(0.0), Point<double>(10.0), 0), f5);

    std::cout << "\nOneDimensionalInterpolatedFunction\n";
    std::map<double, double> rs;
    rs[-INFINITY] = 0.0;
    rs[-1.0] = 0.0;
    rs[0.0] = 10.0;
    rs[1.0] = 0.0;
    rs[INFINITY] = 0.0;
    auto f6 = makeShared<OneDimensionalInterpolatedFunction<double, double>>(rs, &LinearInterpolator<double, double>::singleton);
    printPartitioning<double, Domain<double>>(f6->getDomain(), f6);

    std::cout << "\nMultiplicationFunction optimization\n";
    auto f7 = makeShared<ConstantFunction<double, Domain<double>>>(0.0)->multiply(f6);
    printPartitioning<double, Domain<double>>(f7->getDomain(), f7);

    std::cout << "\nOrthogonalCombinatorFunction\n";
    auto f8 = makeShared<OrthogonalCombinatorFunction<double, double, double>>(f2, f3);
    printPartitioning<double, Domain<double, double>>(f8->getDomain(), f8);

    std::cout << "\nTwoDimensionalBoxcarFunction\n";
    auto f9 = makeShared<TwoDimensionalBoxcarFunction<double, double, double>>(-1.0, 1.0, 0.0, 2.0, 10.0);
    printPartitioning<double, Domain<double, double>>(f9->getDomain(), f9);

    std::cout << "\nDivisionFunction\n";
    auto f10 = f8->divide(f9);
    printPartitioning<double, Domain<double, double>>(f10->getDomain(), f10);
}

%activity:
FunctionTest tester;
tester.test1();

%contains: stdout
ConstantFunction

Partitioning [-inf ... inf]
constant over [-inf ... inf] -> 10

OneDimensionalBoxcarFunction

Partitioning [-inf ... inf]
constant over [-inf ... -1) -> 0
constant over [-1 ... 1) -> 10
constant over [1 ... inf] -> 0

Partitioning [-10 ... 0)
constant over [-10 ... -1) -> 0
constant over [-1 ... 0) -> 10

Partitioning [0 ... 10)
constant over [0 ... 1) -> 10
constant over [1 ... 10) -> 0

AdditionFunction

Partitioning [-inf ... inf]
constant over [-inf ... -1) -> 0
constant over [-1 ... 0) -> 10
constant over [0 ... 1) -> 11
constant over [1 ... 2) -> 1
constant over [2 ... inf] -> 0

Partitioning [-10 ... 0)
constant over [-10 ... -1) -> 0
constant over [-1 ... 0) -> 10

Partitioning [0 ... 10)
constant over [0 ... 1) -> 11
constant over [1 ... 2) -> 1
constant over [2 ... 10) -> 0

MultiplicationFunction

Partitioning [-inf ... inf]
constant over [-inf ... -1) -> 0
constant over [-1 ... 0) -> 0
constant over [0 ... 1) -> 10
constant over [1 ... inf] -> 0

Partitioning [-10 ... 0)
constant over [-10 ... -1) -> 0
constant over [-1 ... 0) -> 0

Partitioning [0 ... 10)
constant over [0 ... 1) -> 10
constant over [1 ... 10) -> 0

OneDimensionalInterpolatedFunction

Partitioning [-inf ... inf]
constant over [-inf ... -1) -> 0
linear over [-1 ... 0) -> from 0 to 10
linear over [0 ... 1) -> from 10 to 0
constant over [1 ... inf] -> 0

MultiplicationFunction optimization

Partitioning [-inf ... inf]
constant over [-inf ... inf] -> 0

OrthogonalCombinatorFunction

Partitioning [-inf ... inf] x [-inf ... inf]
constant over [-inf ... -1) x [-inf ... 0) -> 0
constant over [-inf ... -1) x [0 ... 2) -> 0
constant over [-inf ... -1) x [2 ... inf] -> 0
constant over [-1 ... 1) x [-inf ... 0) -> 0
constant over [-1 ... 1) x [0 ... 2) -> 10
constant over [-1 ... 1) x [2 ... inf] -> 0
constant over [1 ... inf] x [-inf ... 0) -> 0
constant over [1 ... inf] x [0 ... 2) -> 0
constant over [1 ... inf] x [2 ... inf] -> 0

TwoDimensionalBoxcarFunction

Partitioning [-inf ... inf] x [-inf ... inf]
constant over [-inf ... -1) x [-inf ... 0) -> 0
constant over [-1 ... 1) x [-inf ... 0) -> 0
constant over [1 ... inf] x [-inf ... 0) -> 0
constant over [-inf ... -1) x [0 ... 2) -> 0
constant over [-1 ... 1) x [0 ... 2) -> 10
constant over [1 ... inf] x [0 ... 2) -> 0
constant over [-inf ... -1) x [2 ... inf] -> 0
constant over [-1 ... 1) x [2 ... inf] -> 0
constant over [1 ... inf] x [2 ... inf] -> 0

DivisionFunction

Partitioning [-inf ... inf] x [-inf ... inf]
constant over [-inf ... -1) x [-inf ... 0) -> -nan
constant over [-inf ... -1) x [0 ... 2) -> -nan
constant over [-inf ... -1) x [2 ... inf] -> -nan
constant over [-1 ... 1) x [-inf ... 0) -> -nan
constant over [-1 ... 1) x [0 ... 2) -> 1
constant over [-1 ... 1) x [2 ... inf] -> -nan
constant over [1 ... inf] x [-inf ... 0) -> -nan
constant over [1 ... inf] x [0 ... 2) -> -nan
constant over [1 ... inf] x [2 ... inf] -> -nan
