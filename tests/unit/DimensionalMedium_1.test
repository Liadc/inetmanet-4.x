%description:
This test checks the correctness of the dimensional transmission medium.

%includes:
#include "inet/common/math/Functions.h"
#include "inet/physicallayer/common/packetlevel/PowerFunction.h"
#include "inet/physicallayer/base/packetlevel/DimensionalTransmitterBase.h"
#include "inet/physicallayer/pathloss/FreeSpacePathLoss.h"
#include "inet/physicallayer/antenna/IsotropicAntenna.h"

%global:

using namespace inet;
using namespace inet::math;
using namespace inet::physicallayer;
using namespace inet::units::values;

class DimensionalMediumTest : public DimensionalTransmitterBase
{
  public:
    void test1();
};

void DimensionalMediumTest::test1()
{
    mps propagationSpeed(299792458);
    auto pathLoss = new FreeSpacePathLoss();
    auto pathLossFunction = makeShared<PathLossFunction>(pathLoss);
    auto antenna = new IsotropicAntenna();
    auto transmitterAntennaGainFunction = makeShared<AntennaGainFunction>(antenna->getGain().get());
    auto obstacleLossFunction = makeShared<ConstantFunction<double, Domain<m, m, m, m, m, m, Hz>>>(1);

    parseTimeGains("left s 0dB either e 0dB right");

    auto backgroundNoise = makeShared<ConstantFunction<WpHz, Domain<m, m, m, simtime_t, Hz>>>(pW(1) / MHz(20));
    std::cout << "Background noise: " << *backgroundNoise << std::endl;

    auto transmissionFunction1 = createPowerFunction(0, 20, GHz(1), MHz(20), mW(100));
    std::cout << "Transmission 1: " << *transmissionFunction1 << std::endl;
    auto propagatedTransmissionFunction1 = makeShared<PropagatedTransmissionPowerFunction>(transmissionFunction1, Point<m, m, m>(m(10), m(0), m(0)), propagationSpeed);
    auto attenuationFunction1 = makeShared<SpaceAndFrequencyAttenuationFunction>(transmitterAntennaGainFunction, pathLossFunction, obstacleLossFunction, Point<m, m, m>(m(10), m(0), m(0)), Quaternion(), propagationSpeed);
    auto approximatedAttenuationFunction1 = makeShared<ApproximatedFunction<double, Domain<m, m, m, simtime_t, Hz>, 4, Hz>>(MHz(990), MHz(1100), MHz(1), &CenterInterpolator<Hz, double>::singleton, attenuationFunction1);
    auto receptionFunction1 = propagatedTransmissionFunction1->multiply(approximatedAttenuationFunction1);
    //std::cout << "Reception 1: " << *receptionFunction1 << std::endl;

    auto transmissionFunction2 = createPowerFunction(0, 20, GHz(1), MHz(20), mW(10));
    std::cout << "Transmission 2: " << *transmissionFunction2 << std::endl;
    auto propagatedTransmissionFunction2 = makeShared<PropagatedTransmissionPowerFunction>(transmissionFunction2, Point<m, m, m>(m(-10), m(0), m(0)), propagationSpeed);
    auto attenuationFunction2 = makeShared<SpaceAndFrequencyAttenuationFunction>(transmitterAntennaGainFunction, pathLossFunction, obstacleLossFunction, Point<m, m, m>(m(-10), m(0), m(0)), Quaternion(), propagationSpeed);
    auto approximatedAttenuationFunction2 = makeShared<ApproximatedFunction<double, Domain<m, m, m, simtime_t, Hz>, 4, Hz>>(MHz(990), MHz(1100), MHz(1), &CenterInterpolator<Hz, double>::singleton, attenuationFunction2);
    auto receptionFunction2 = propagatedTransmissionFunction2->multiply(approximatedAttenuationFunction2);
    //std::cout << "Reception 2: " << *receptionFunction2 << std::endl;

    auto interferenceFunction = makeShared<SumFunction<WpHz, Domain<m, m, m, simtime_t, Hz>>>(std::vector<Ptr<const IFunction<WpHz, Domain<m, m, m, simtime_t, Hz>>>>({backgroundNoise, receptionFunction2}));

    auto snirFunction = receptionFunction1->divide(interferenceFunction);
    //std::cout << "SNIR: " << *snirFunction << std::endl;

    Point<m, m, m> position(m(0), m(0), m(0));
    simtime_t startTime = 10 / propagationSpeed.get();
    simtime_t endTime = startTime + 20;
    simtime_t symbolTime = 10;
    Hz startFrequency = MHz(990);
    Hz endFrequency = MHz(1010);
    Hz subcarrierBandwidth = MHz(10);
    for (simtime_t time = startTime; time < endTime; time += symbolTime) {
        for (Hz frequency = startFrequency; frequency < endFrequency; frequency += subcarrierBandwidth) {
            Point<m, m, m, simtime_t, Hz> lower(std::get<0>(position), std::get<1>(position), std::get<2>(position), time, frequency);
            Point<m, m, m, simtime_t, Hz> upper(std::get<0>(position), std::get<1>(position), std::get<2>(position), time + symbolTime, frequency + subcarrierBandwidth);
            Interval<m, m, m, simtime_t, Hz> interval(lower, upper, 0b11100);
            double snirMean = snirFunction->getMean(interval);
            std::cout << "  interval = " << interval << ", SNIR mean = " << snirMean << std::endl;
        }
    }
    delete antenna;
    delete pathLoss;
}

%activity:
DimensionalMediumTest tester;
tester.test1();

%contains: stdout
Background noise: f {
  i [(-inf m, -inf m, -inf m, -4611686.018427387903, -inf Hz) ... (inf m, inf m, inf m, 4611686.018427387903, inf GHz)] 11111 -> { @(-inf m, -inf m, -inf m, -4611686.018427387903, -inf Hz) = 5e-20 WpHz, @(inf m, -inf m, -inf m, -4611686.018427387903, -inf Hz) = 5e-20 WpHz, @(-inf m, inf m, -inf m, -4611686.018427387903, -inf Hz) = 5e-20 WpHz, @(inf m, inf m, -inf m, -4611686.018427387903, -inf Hz) = 5e-20 WpHz, @(-inf m, -inf m, inf m, -4611686.018427387903, -inf Hz) = 5e-20 WpHz, @(inf m, -inf m, inf m, -4611686.018427387903, -inf Hz) = 5e-20 WpHz, @(-inf m, inf m, inf m, -4611686.018427387903, -inf Hz) = 5e-20 WpHz, @(inf m, inf m, inf m, -4611686.018427387903, -inf Hz) = 5e-20 WpHz, @(-inf m, -inf m, -inf m, 4611686.018427387903, -inf Hz) = 5e-20 WpHz, @(inf m, -inf m, -inf m, 4611686.018427387903, -inf Hz) = 5e-20 WpHz, @(-inf m, inf m, -inf m, 4611686.018427387903, -inf Hz) = 5e-20 WpHz, @(inf m, inf m, -inf m, 4611686.018427387903, -inf Hz) = 5e-20 WpHz, @(-inf m, -inf m, inf m, 4611686.018427387903, -inf Hz) = 5e-20 WpHz, @(inf m, -inf m, inf m, 4611686.018427387903, -inf Hz) = 5e-20 WpHz, @(-inf m, inf m, inf m, 4611686.018427387903, -inf Hz) = 5e-20 WpHz, @(inf m, inf m, inf m, 4611686.018427387903, -inf Hz) = 5e-20 WpHz, @(-inf m, -inf m, -inf m, -4611686.018427387903, inf GHz) = 5e-20 WpHz, @(inf m, -inf m, -inf m, -4611686.018427387903, inf GHz) = 5e-20 WpHz, @(-inf m, inf m, -inf m, -4611686.018427387903, inf GHz) = 5e-20 WpHz, @(inf m, inf m, -inf m, -4611686.018427387903, inf GHz) = 5e-20 WpHz, @(-inf m, -inf m, inf m, -4611686.018427387903, inf GHz) = 5e-20 WpHz, @(inf m, -inf m, inf m, -4611686.018427387903, inf GHz) = 5e-20 WpHz, @(-inf m, inf m, inf m, -4611686.018427387903, inf GHz) = 5e-20 WpHz, @(inf m, inf m, inf m, -4611686.018427387903, inf GHz) = 5e-20 WpHz, @(-inf m, -inf m, -inf m, 4611686.018427387903, inf GHz) = 5e-20 WpHz, @(inf m, -inf m, -inf m, 4611686.018427387903, inf GHz) = 5e-20 WpHz, @(-inf m, inf m, -inf m, 4611686.018427387903, inf GHz) = 5e-20 WpHz, @(inf m, inf m, -inf m, 4611686.018427387903, inf GHz) = 5e-20 WpHz, @(-inf m, -inf m, inf m, 4611686.018427387903, inf GHz) = 5e-20 WpHz, @(inf m, -inf m, inf m, 4611686.018427387903, inf GHz) = 5e-20 WpHz, @(-inf m, inf m, inf m, 4611686.018427387903, inf GHz) = 5e-20 WpHz, @(inf m, inf m, inf m, 4611686.018427387903, inf GHz) = 5e-20 WpHz, min = 5e-20 WpHz, max = 5e-20 WpHz, mean = 5e-20 WpHz }
} min = 5e-20 WpHz, max = 5e-20 WpHz, mean = 5e-20 WpHz
Transmission 1: f {
  i [(-4611686.018427387903, -inf Hz) ... (0, 990 MHz)] 00 -> { @(-4611686.018427387903, -inf Hz) = 0 WpHz, @(0, -inf Hz) = 0 WpHz, @(-4611686.018427387903, 990 MHz) = 0 WpHz, @(0, 990 MHz) = 5e-09 WpHz, min = 0 WpHz, max = 0 WpHz, mean = 0 WpHz }
  i [(0, -inf Hz) ... (20, 990 MHz)] 00 -> { @(0, -inf Hz) = 0 WpHz, @(20, -inf Hz) = 0 WpHz, @(0, 990 MHz) = 5e-09 WpHz, @(20, 990 MHz) = 0 WpHz, min = 0 WpHz, max = 0 WpHz, mean = 0 WpHz }
  i [(20, -inf Hz) ... (4611686.018427387903, 990 MHz)] 00 -> { @(20, -inf Hz) = 0 WpHz, @(4611686.018427387903, -inf Hz) = 0 WpHz, @(20, 990 MHz) = 0 WpHz, @(4611686.018427387903, 990 MHz) = 0 WpHz, min = 0 WpHz, max = 0 WpHz, mean = 0 WpHz }
  i [(-4611686.018427387903, 990 MHz) ... (0, 1.01 GHz)] 00 -> { @(-4611686.018427387903, 990 MHz) = 0 WpHz, @(0, 990 MHz) = 5e-09 WpHz, @(-4611686.018427387903, 1.01 GHz) = 0 WpHz, @(0, 1.01 GHz) = 0 WpHz, min = 0 WpHz, max = 0 WpHz, mean = 0 WpHz }
  i [(0, 990 MHz) ... (20, 1.01 GHz)] 00 -> { @(0, 990 MHz) = 5e-09 WpHz, @(20, 990 MHz) = 0 WpHz, @(0, 1.01 GHz) = 0 WpHz, @(20, 1.01 GHz) = 0 WpHz, min = 5e-09 WpHz, max = 5e-09 WpHz, mean = 5e-09 WpHz }
  i [(20, 990 MHz) ... (4611686.018427387903, 1.01 GHz)] 00 -> { @(20, 990 MHz) = 0 WpHz, @(4611686.018427387903, 990 MHz) = 0 WpHz, @(20, 1.01 GHz) = 0 WpHz, @(4611686.018427387903, 1.01 GHz) = 0 WpHz, min = 0 WpHz, max = 0 WpHz, mean = 0 WpHz }
  i [(-4611686.018427387903, 1.01 GHz) ... (0, inf GHz)] 00 -> { @(-4611686.018427387903, 1.01 GHz) = 0 WpHz, @(0, 1.01 GHz) = 0 WpHz, @(-4611686.018427387903, inf GHz) = 0 WpHz, @(0, inf GHz) = 0 WpHz, min = 0 WpHz, max = 0 WpHz, mean = 0 WpHz }
  i [(0, 1.01 GHz) ... (20, inf GHz)] 00 -> { @(0, 1.01 GHz) = 0 WpHz, @(20, 1.01 GHz) = 0 WpHz, @(0, inf GHz) = 0 WpHz, @(20, inf GHz) = 0 WpHz, min = 0 WpHz, max = 0 WpHz, mean = 0 WpHz }
  i [(20, 1.01 GHz) ... (4611686.018427387903, inf GHz)] 00 -> { @(20, 1.01 GHz) = 0 WpHz, @(4611686.018427387903, 1.01 GHz) = 0 WpHz, @(20, inf GHz) = 0 WpHz, @(4611686.018427387903, inf GHz) = 0 WpHz, min = 0 WpHz, max = 0 WpHz, mean = 0 WpHz }
} min = 0 WpHz, max = 5e-09 WpHz, mean = 0 WpHz
Transmission 2: f {
  i [(-4611686.018427387903, -inf Hz) ... (0, 990 MHz)] 00 -> { @(-4611686.018427387903, -inf Hz) = 0 WpHz, @(0, -inf Hz) = 0 WpHz, @(-4611686.018427387903, 990 MHz) = 0 WpHz, @(0, 990 MHz) = 5e-10 WpHz, min = 0 WpHz, max = 0 WpHz, mean = 0 WpHz }
  i [(0, -inf Hz) ... (20, 990 MHz)] 00 -> { @(0, -inf Hz) = 0 WpHz, @(20, -inf Hz) = 0 WpHz, @(0, 990 MHz) = 5e-10 WpHz, @(20, 990 MHz) = 0 WpHz, min = 0 WpHz, max = 0 WpHz, mean = 0 WpHz }
  i [(20, -inf Hz) ... (4611686.018427387903, 990 MHz)] 00 -> { @(20, -inf Hz) = 0 WpHz, @(4611686.018427387903, -inf Hz) = 0 WpHz, @(20, 990 MHz) = 0 WpHz, @(4611686.018427387903, 990 MHz) = 0 WpHz, min = 0 WpHz, max = 0 WpHz, mean = 0 WpHz }
  i [(-4611686.018427387903, 990 MHz) ... (0, 1.01 GHz)] 00 -> { @(-4611686.018427387903, 990 MHz) = 0 WpHz, @(0, 990 MHz) = 5e-10 WpHz, @(-4611686.018427387903, 1.01 GHz) = 0 WpHz, @(0, 1.01 GHz) = 0 WpHz, min = 0 WpHz, max = 0 WpHz, mean = 0 WpHz }
  i [(0, 990 MHz) ... (20, 1.01 GHz)] 00 -> { @(0, 990 MHz) = 5e-10 WpHz, @(20, 990 MHz) = 0 WpHz, @(0, 1.01 GHz) = 0 WpHz, @(20, 1.01 GHz) = 0 WpHz, min = 5e-10 WpHz, max = 5e-10 WpHz, mean = 5e-10 WpHz }
  i [(20, 990 MHz) ... (4611686.018427387903, 1.01 GHz)] 00 -> { @(20, 990 MHz) = 0 WpHz, @(4611686.018427387903, 990 MHz) = 0 WpHz, @(20, 1.01 GHz) = 0 WpHz, @(4611686.018427387903, 1.01 GHz) = 0 WpHz, min = 0 WpHz, max = 0 WpHz, mean = 0 WpHz }
  i [(-4611686.018427387903, 1.01 GHz) ... (0, inf GHz)] 00 -> { @(-4611686.018427387903, 1.01 GHz) = 0 WpHz, @(0, 1.01 GHz) = 0 WpHz, @(-4611686.018427387903, inf GHz) = 0 WpHz, @(0, inf GHz) = 0 WpHz, min = 0 WpHz, max = 0 WpHz, mean = 0 WpHz }
  i [(0, 1.01 GHz) ... (20, inf GHz)] 00 -> { @(0, 1.01 GHz) = 0 WpHz, @(20, 1.01 GHz) = 0 WpHz, @(0, inf GHz) = 0 WpHz, @(20, inf GHz) = 0 WpHz, min = 0 WpHz, max = 0 WpHz, mean = 0 WpHz }
  i [(20, 1.01 GHz) ... (4611686.018427387903, inf GHz)] 00 -> { @(20, 1.01 GHz) = 0 WpHz, @(4611686.018427387903, 1.01 GHz) = 0 WpHz, @(20, inf GHz) = 0 WpHz, @(4611686.018427387903, inf GHz) = 0 WpHz, min = 0 WpHz, max = 0 WpHz, mean = 0 WpHz }
} min = 0 WpHz, max = 5e-10 WpHz, mean = 0 WpHz
  interval = [(0 m, 0 m, 0 m, 0.000000033356, 990 MHz) ... (0 m, 0 m, 0 m, 10.000000033356, 1 GHz)] 11100, SNIR mean = 9.99983
  interval = [(0 m, 0 m, 0 m, 0.000000033356, 1 GHz) ... (0 m, 0 m, 0 m, 10.000000033356, 1.01 GHz)] 11100, SNIR mean = 9.99982
  interval = [(0 m, 0 m, 0 m, 10.000000033356, 990 MHz) ... (0 m, 0 m, 0 m, 20.000000033356, 1 GHz)] 11100, SNIR mean = 9.99983
  interval = [(0 m, 0 m, 0 m, 10.000000033356, 1 GHz) ... (0 m, 0 m, 0 m, 20.000000033356, 1.01 GHz)] 11100, SNIR mean = 9.99982
